<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://bswsw.github.io/</id><title>bveloper</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2025-04-26T15:51:29+09:00</updated> <author> <name>BAE SANGWOO</name> <uri>https://bswsw.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://bswsw.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://bswsw.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 BAE SANGWOO </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>10장. 일괄 처리</title><link href="https://bswsw.github.io/posts/designing-data-chapter10/" rel="alternate" type="text/html" title="10장. 일괄 처리" /><published>2025-04-26T13:00:00+09:00</published> <updated>2025-04-26T13:00:00+09:00</updated> <id>https://bswsw.github.io/posts/designing-data-chapter10/</id> <content src="https://bswsw.github.io/posts/designing-data-chapter10/" /> <author> <name>Bae Sangwoo</name> </author> <category term="Study" /> <category term="데이터 중심 어플리케이션 설계" /> <summary> 0. 일괄 처리 일괄 처리는 대규모 데이터를 처리하는 중요한 방식으로, 서비스(온라인), 일괄 처리(오프라인), 스트림 처리(준실시간)와 구분한다. 일괄 처리 시스템은 대용량 입력 데이터를 받아 처리하고 결과 데이터를 생산하며, 작업 시간이 길어 사용자의 즉각적인 대기 없이 반복적인 일정으로 수행된다. 주요 성능 지표는 처리량이다. 일괄 처리는 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션 구축에 중요한 구성요소 이다. 1. 유닉스 도구로 일괄 처리하기 1.1. 단순 로그 분석 cat, awk, sort, uniq, head 등의 명령으로 파이프로 연결하여 로그에서 특정 정보를 추출하고, 정렬 및 집계하는 작업을 수행할 수 있다. 대용량 파일을 효율적으로... </summary> </entry> <entry><title>09장. 일관성과 합의</title><link href="https://bswsw.github.io/posts/designing-data-chapter9/" rel="alternate" type="text/html" title="09장. 일관성과 합의" /><published>2025-04-13T19:00:00+09:00</published> <updated>2025-04-13T22:44:18+09:00</updated> <id>https://bswsw.github.io/posts/designing-data-chapter9/</id> <content src="https://bswsw.github.io/posts/designing-data-chapter9/" /> <author> <name>Bae Sangwoo</name> </author> <category term="Study" /> <category term="데이터 중심 어플리케이션 설계" /> <summary> 0. 일관성과 합의 애플리케이션은 다양한 결함이 발생 가능하다. 네트워크 패킷 손실 타임아웃으로 인한 중복 수신 네트워크 지연 발생 및 순서 변경 정확하지 않은 시간 노드가 멈추거나 죽는 상황 내결함성을 지닌 시스템을 구축하는 가장 좋은 방법은 유용한 보장을 해주는 범용 추상화를 찾아 이를 구현하고 애플리케이션에서 이 보장에 의존하게 하는 것이다. 트랜잭션 애플리케이셔션은 충돌이 없음 (원자성) 데이터베이스에 동시에 접근하지 않음 (격리성) 데이터를 믿을 수 있음 (지속성) 분산 시... </summary> </entry> <entry><title>08장. 분산 시스템의 골칫거리</title><link href="https://bswsw.github.io/posts/designing-data-chapter8/" rel="alternate" type="text/html" title="08장. 분산 시스템의 골칫거리" /><published>2025-02-09T13:00:00+09:00</published> <updated>2025-03-03T14:48:58+09:00</updated> <id>https://bswsw.github.io/posts/designing-data-chapter8/</id> <content src="https://bswsw.github.io/posts/designing-data-chapter8/" /> <author> <name>Bae Sangwoo</name> </author> <category term="Study" /> <category term="데이터 중심 어플리케이션 설계" /> <summary> 어떤 것이든지 잘못될 가능성이 있다면 잘못된다. 0. 분산 시스템의 골칫거리 분산 시스템을 다루는 것은 한 컴퓨터에서 실행되는 소프트웨어를 작성하는 일과는 근본적으로 다르다. 엔지니어로서의 우리의 임무는 모든게 잘못되더라도 사용자가 기대하는 보장을 만족시키는 제 역할을 해내는 시스템을 구축하는 것이다. 1. 결함과 부분 장애 컴퓨터에 내부 결함이 발생하면 잘못된 결과를 반환하기보다는 완전히 동작하지 않기를 원한다. 단일 컴퓨터 기준 하드웨어가 올바르게 동작하면 같은 연산은 항상 같은 결과를 낸다. (결정적이다.) 하드웨어 문제가 있으면 보통 시스템이 완전히 실패하는 결과를 낳는다. 분산 시스템 기준 네... </summary> </entry> <entry><title>07장. 트랜잭션</title><link href="https://bswsw.github.io/posts/designing-data-chapter7/" rel="alternate" type="text/html" title="07장. 트랜잭션" /><published>2025-01-12T09:30:00+09:00</published> <updated>2025-02-07T00:49:05+09:00</updated> <id>https://bswsw.github.io/posts/designing-data-chapter7/</id> <content src="https://bswsw.github.io/posts/designing-data-chapter7/" /> <author> <name>Bae Sangwoo</name> </author> <category term="Study" /> <category term="데이터 중심 어플리케이션 설계" /> <summary> 트랜잭션 잘 사용하기 0. 트랜잭션 데이터 시스템은 다양한 문제가 발생할 가능성이 있다. 데이터베이스 소프트웨어나 하드웨어는 언제라도 실패할 수 있다. 애플리케이션은 언제라도 죽을 수 있다. 네트워크가 끊기면 애플리케이션과 데이터베이스의 연결이 갑자기 끊기거나 데이터베이스 노드 사이의 통신이 안 될수 있다. 여러 클라이언트가 동시에 데이터베이스에 쓰기를 실행해서 다른 클라이언트가 쓴 내용을 덮어쓸 수 있다. 클라이언트가 부분적으로만 갱신돼서 비정상적인 데이터를 읽을 수 있다. 클라이언트 사이의 경쟁 조건은 예측하지 못한 버그를 유발할 수 있다. ... </summary> </entry> <entry><title>06장. 파티셔닝</title><link href="https://bswsw.github.io/posts/designing-data-chapter6/" rel="alternate" type="text/html" title="06장. 파티셔닝" /><published>2025-01-08T22:00:00+09:00</published> <updated>2025-01-12T12:28:02+09:00</updated> <id>https://bswsw.github.io/posts/designing-data-chapter6/</id> <content src="https://bswsw.github.io/posts/designing-data-chapter6/" /> <author> <name>Bae Sangwoo</name> </author> <category term="Study" /> <category term="데이터 중심 어플리케이션 설계" /> <summary> 대용량 데이터셋을 파티셔닝하는 몇 가지 방법을 살펴보고 인덱스와 파티셔닝이 어떻게 상호작용하는지 살펴보자 클러스터에 노드를 추가하거나 제거할 때 필요한 재균형화(리밸런싱)에 대해서 살펴보자 데이터베이스가 어떻게 요청을 올바른 파티션에 전달하고 질의를 실행하는지 살펴보자 0. 파티셔닝 데이터셋이 매우 크거나 질의 처리량이 매우 높다면 복제만으로는 부족하고 데이터를 파티션으로 쪼갤 필요가 있는 이 작업을 샤딩이라고 함 여기서 말하는 파티션은? 몽고DB, 엘라스틱서치, 솔라클라우드의 샤드에 해당함 HBase: 리전 빅테이블: 테블릿 카산드라/리악: 브이노드(vnode) 카우치베이스: 브이버켓(vBucket) 파... </summary> </entry> </feed>
